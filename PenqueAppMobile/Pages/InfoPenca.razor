@page "/infoPenca"
@using PenqueAppMobile.Models
@using PenqueAppMobile.Services
@using Newtonsoft.Json
@inject NavigationManager NavManager;
@inject IAppService AppService

@{
    var penca = Setting.PencaDetail;
    var liga = AsyncUtil.RunSync<int>(() => GetLigas(penca.id));
    SeleccionarLigaEquipo(liga);

}

<section class="container center-vh">
    
      @if(penca.tipo_Liga.ToString().Equals("Equipo")){
          <h2 class="mat-h1 text-center colorP">Partidos</h2>
      }
      else{
          <h2 class="mat-h1 text-center colorP">Competencias</h2>
      }
      <div class="dashboard">
        <button mat-stroked-button class="enabled button-89" style="margin-left:5px" @onclick="() => verDashboard()">Ver Dashboard</button>
      </div>
      @{
          if (penca.tipo_Liga.ToString().Equals("Equipo"))
          {
              var pc = AsyncUtil.RunSync<List<Partido>>(() => GetPartidos(liga));
              foreach(var partido in pc)
              {
                <div class="row" @onclick="() => VerPartido(partido.id)">
                      <div class="col-3"></div>
                      <div class="col">
                          <div class="">
                              <h4 class="mb-1">@partido.fecha</h4>
                              <small class="text-muted">@partido.local <span>VS.</span>@partido.visitante</small>
                          </div>
                      <p class="mb-1"></p>
                      </div>
                  </div>
              }
          }
          else
          {
              var pc = AsyncUtil.RunSync<List<Competencia>>(() => GetCompetencias(liga));
              foreach(var competencia in pc)
              {
                <div class="row" @onclick="() => verCompetencia(competencia.id, competencia.nombre, competencia.fecha_competencia)">
                      <div class="col-3"></div>
                      <div class="col">
                          <div class="">
                         <h4 class="mb-1">@competencia.fecha_competencia</h4>
                         <small class="text-muted">@competencia.nombre</small>
                      </div>
                      <p class="mb-1"></p>
                      </div>
                  </div>
              }
          }
      }
   
</section>

<button class="button-49" role="button" @onclick="() => atras()">Atrás</button>


@code {
    private async void VerPartido(int idPartido)
    {
        var response = await AppService.SeleccionarPartido(idPartido);
        var partido = new Partido
            {
                id = response.id,
                fecha = response.fecha,
                Idlocal = response.Idlocal,
                Idvisitante = response.Idvisitante,
                local = response.local,
                visitante = response.visitante,
                resultado = response.resultado,
                deporte = response.deporte
            };

        string matchBasicInfoStr = JsonConvert.SerializeObject(partido);
        await SecureStorage.SetAsync(nameof(Setting.PartidoDetail), matchBasicInfoStr);
        Setting.PartidoDetail = partido;
        NavManager.NavigateTo("/verPartido");
    }

    private void verDashboard()
    {
        NavManager.NavigateTo("/verDashboard");
    }

    private async Task<int> GetLigas(int idPenca)
    {
        int liga = await Task.Run(() => AppService.verLiga(idPenca));

        return liga;
    }



    private async Task<List<Partido>> GetPartidos(int idLiga)
    {
        List<Partido> listaP = await Task.Run(() => AppService.ListaPartidos(idLiga));

        return listaP;
    }

    private async Task<List<Competencia>> GetCompetencias(int idLiga){
        List<Competencia> listaC = await Task.Run(() => AppService.ListaCompetencias(idLiga));

        return listaC;
    }

    private async void verCompetencia(int id, string nombre, DateTime fecha)
    {
        var competencia = new Competencia
        {
            id = id,
            nombre = nombre,
            fecha_competencia = fecha

        };

        string infoCompetencia = JsonConvert.SerializeObject(competencia);
        await SecureStorage.SetAsync(nameof(Setting.competencia), infoCompetencia);
        Setting.competencia = competencia;
        NavManager.NavigateTo("/verCompetencia");
    }

    private async void SeleccionarLigaEquipo(int idLiga)
    {
        var response = await AppService.SeleccionarLigaE(idLiga);
        var ligaE = new Liga_Equipo
            {
                Id = response.Id,
                NombreLiga = response.NombreLiga,
                Tope = response.Tope,
                Tipo_Deporte = response.Tipo_Deporte,
            };

        string leagueBasicInfoStr = JsonConvert.SerializeObject(ligaE);
        await SecureStorage.SetAsync(nameof(Setting.LigaEquipoDetail), leagueBasicInfoStr);
        Setting.LigaEquipoDetail = ligaE;
    }

    private async void SeleccionarLigaIndividual(int idLiga)
    {
        var response = await AppService.SeleccionarLigaI(idLiga);
        var ligaI = new Liga_Individual
            {
                Id = response.Id,
                Nombre = response.Nombre,
                TopeCompetencias = response.TopeCompetencias,
                TipoArea = response.TipoArea
            };

        string leagueBasicInfoStr = JsonConvert.SerializeObject(ligaI);
        await SecureStorage.SetAsync(nameof(Setting.LigaIndividualDetail), leagueBasicInfoStr);
        Setting.LigaIndividualDetail = ligaI;
    }

    private void atras()
    {
        if (Setting.UserBasicDetail != null)
        {
            NavManager.NavigateTo("/dashboard");
        }
        else
        {
            NavManager.NavigateTo("/");
        }
    }
}
@*"Dashboard, Partido y Competencia especifico y mensajeria"*@